Oppgave 1:

Forskjellen på backend og frontend er hvor koden kjører. Om koden kjører i nettleseren sier vi at den er frontend,
og den kjører på en server er den backend. 

For wikipedia vil frontend være det du som bruker ser, redigerings-grensesnitt, innnlogging. Backend vil være autentisering,
endringer i databasen, database-oppslaget. Det ser ut som rådata fra databaseoppslaget sendes over og presenteres/bearbeides frontend.



Oppgave 2:
All kode som kjører frontend vil sluttbrukeren ha tilgang til. De kan potensielt endre hvilke(t) skript som kjører elelr gjøre endringer
i skriptet vårt. Man kan derfor ikke ta noe for gitt av det man får fra frontend. All validering frontend må være for å gi en god 
brukeropplevelse/unngå unødige feil, men alt må også kontrolleres backend. Vi vet faktisk ikke om det er vår kode eller noen andres kode
som sender oss data.



Oppgave 3:
HTTP error codes:

404: Page not found.
201: Created. New resource created.
200: OK. Standard response to HTTP-requests.
400: Bad request. The server cannot or will not process the request due to an apparent client error.
401: Unauthorized. Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided. 
500: Internal Server Error. Genereic error message.
501: Not Implemented. Serveren kjenner ikke til request-metoden, eller har ikke mulighet til å utføre oppgaven med den metoden.
418: I'm a teapot. This code was defined in 1998 as one of the traditional IETF April Fools' jokes, in RFC 2324, Hyper Text Coffee 
    Pot Control Protocol, and is not expected to be implemented by actual HTTP servers. The RFC specifies this code should be returned 
    by teapots requested to brew coffee.[54] This HTTP status is used as an Easter egg in some websites, including Google.com



Oppgave 4:
Endpoint er den som "tar imot" HTTP-forespørselen (kan være alt etter selve url-en).
Lager et API (later som jeg er steam) for å se spill, legge til venner, fjerne venner, gi kallenavn til venner.

